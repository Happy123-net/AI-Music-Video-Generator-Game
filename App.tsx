
import React, { useState, useEffect, useCallback } from 'react';
import { VideoGeneratorForm } from './components/VideoGeneratorForm';
import { VideoDisplay } from './components/VideoDisplay';
import { generateVideo } from './services/geminiService';
import { LOADING_MESSAGES } from './constants';
import type { AspectRatio } from './types';
import { VevoLogo } from './components/icons/VevoLogo';

const App: React.FC = () => {
  const [prompt, setPrompt] = useState<string>('');
  const [aspectRatio, setAspectRatio] = useState<AspectRatio>('16:9');
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [loadingMessage, setLoadingMessage] = useState<string>('');
  const [generatedVideoUrl, setGeneratedVideoUrl] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    // Fix: Use `number | undefined` for the interval ID, as `setInterval` returns a number in the browser.
    // `NodeJS.Timeout` is for Node.js environments.
    let interval: number | undefined;
    if (isLoading) {
      setLoadingMessage(LOADING_MESSAGES[0]);
      let messageIndex = 0;
      interval = setInterval(() => {
        messageIndex = (messageIndex + 1) % LOADING_MESSAGES.length;
        setLoadingMessage(LOADING_MESSAGES[messageIndex]);
      }, 3000);
    }
    return () => clearInterval(interval);
  }, [isLoading]);

  const handleGenerateVideo = useCallback(async () => {
    if (!prompt) {
      setError('Please enter a prompt for your music video.');
      return;
    }
    setIsLoading(true);
    setError(null);
    setGeneratedVideoUrl(null);

    try {
      const videoUrl = await generateVideo(prompt, aspectRatio);
      setGeneratedVideoUrl(videoUrl);
    } catch (err) {
      console.error(err);
      setError(err instanceof Error ? err.message : 'An unknown error occurred during video generation.');
    } finally {
      setIsLoading(false);
    }
  }, [prompt, aspectRatio]);
  
  const handleReset = () => {
    setPrompt('');
    setAspectRatio('16:9');
    setGeneratedVideoUrl(null);
    setError(null);
    setIsLoading(false);
  };


  return (
    <div className="bg-gray-900 min-h-screen text-white font-sans flex flex-col items-center p-4 sm:p-6 md:p-8">
      <div className="w-full max-w-4xl mx-auto">
        <header className="text-center mb-8">
          <div className="flex items-center justify-center gap-4">
            <VevoLogo className="h-10 w-auto text-white" />
            <h1 className="text-3xl sm:text-4xl md:text-5xl font-bold tracking-tight bg-clip-text text-transparent bg-gradient-to-r from-pink-500 to-violet-500">
              AI Music Video Generator
            </h1>
          </div>
          <p className="mt-4 text-lg text-gray-400">
            Turn your musical ideas into stunning videos. The director's chair is yours.
          </p>
        </header>

        <main className="bg-gray-800/50 backdrop-blur-sm rounded-2xl shadow-2xl shadow-black/50 p-6 sm:p-8 border border-gray-700">
          {!generatedVideoUrl && (
            <VideoGeneratorForm
              prompt={prompt}
              setPrompt={setPrompt}
              aspectRatio={aspectRatio}
              setAspectRatio={setAspectRatio}
              isLoading={isLoading}
              onSubmit={handleGenerateVideo}
            />
          )}

          {error && <div className="mt-6 text-center text-red-400 bg-red-900/50 p-4 rounded-lg">{error}</div>}

          <VideoDisplay
            isLoading={isLoading}
            loadingMessage={loadingMessage}
            videoUrl={generatedVideoUrl}
            aspectRatio={aspectRatio}
            prompt={prompt}
            onReset={handleReset}
          />
        </main>
        
        <footer className="text-center mt-8 text-gray-500 text-sm">
            <p>Powered by Gemini. Videos are generated by AI and may be fictional.</p>
            <p>For best results, download and share manually.</p>
        </footer>
      </div>
    </div>
  );
};

export default App;
